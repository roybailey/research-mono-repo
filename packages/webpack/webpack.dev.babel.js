/**
 * DEVELOPMENT WEBPACK CONFIGURATION
 */

const path = require('path');
const fs = require('fs');
const glob = require('glob');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');
const CircularDependencyPlugin = require('circular-dependency-plugin');
const logger = require('@roybailey/dev-server/logger');
const createStyledComponentsTransformer = require('typescript-plugin-styled-components').default;
const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
const argv = require('minimist')(process.argv.slice(2));

// corePath = process.cwd();
module.exports = options => {
  const pkg = require(path.resolve(options.corePath, 'package.json'));
  const { dllPlugin } = pkg;

  const plugins = [
    new ForkTsCheckerWebpackPlugin(), // Emit ts errors in webpack console
    new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
    new HtmlWebpackPlugin({
      inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
      template: options.templatePath,
    }),
    new CircularDependencyPlugin({
      exclude: /a\.js|node_modules/, // exclude node_modules
      failOnError: false, // show a warning when there is a circular dependency
    }),
  ];

  if (dllPlugin) {
    glob.sync(`${path.resolve(options.corePath, dllPlugin.path)}/*.dll.js`).forEach(dllPath => {
      plugins.push(
        new AddAssetHtmlPlugin({
          filepath: dllPath,
          includeSourcemap: false,
        }),
      );
    });
  }

  /**
   * Select which plugins to use to optimize the bundle's handling of
   * third party dependencies.
   *
   * If there is a dllPlugin key on the project's package.json, the
   * Webpack DLL Plugin will be used.
   *
   */
  function dependencyHandlers() {
    // Don't do anything during the DLL Build step
    if (process.env.BUILDING_DLL) {
      return [];
    }

    // Don't do anything if package.json does not have a dllPlugin property
    // Code splitting now included by default in Webpack 4
    if (!dllPlugin) {
      return [];
    }

    const dllPath = path.resolve(options.corePath, dllPlugin.path || 'node_modules/react-boilerplate-dlls');

    /**
     * If DLLs aren't explicitly defined, we assume all production dependencies listed in package.json
     * Reminder: You need to exclude any server side dependencies by listing them in dllConfig.exclude
     */
    if (!dllPlugin.dlls) {
      const manifestPath = path.resolve(dllPath, 'reactBoilerplateDeps.json');

      if (!fs.existsSync(manifestPath)) {
        logger.error('The DLL manifest is missing. Please run `npm run build:dll`');
        process.exit(0);
      }

      return [
        new webpack.DllReferencePlugin({
          context: options.corePath,
          manifest: require(manifestPath), // eslint-disable-line global-require
        }),
      ];
    }

    // If DLLs are explicitly defined, we automatically create a DLLReferencePlugin for each of them.
    const dllManifests = Object.keys(dllPlugin.dlls).map(name => path.join(dllPath, `/${name}.json`));

    return dllManifests.map(manifestPath => {
      if (!fs.existsSync(path)) {
        if (!fs.existsSync(manifestPath)) {
          logger.error(`The following Webpack DLL manifest is missing: ${path.basename(manifestPath)}`);
          logger.error(`Expected to find it in ${dllPath}`);
          logger.error('Please run: npm run build:dll');

          process.exit(0);
        }
      }

      return new webpack.DllReferencePlugin({
        context: options.corePath,
        manifest: require(manifestPath), // eslint-disable-line global-require
      });
    });
  }

  const hotReloadingEntries = {
    // Add hot reloading in development
    webpackHotMiddleware: 'webpack-hot-middleware/client?reload=true',
    // Necessary for hot reloading with IE
    ieEventSourcePolyfill: 'eventsource-polyfill'
  };
  const entry = Object.assign({}, hotReloadingEntries, options.entryPaths);

  if (options.entryPath) {
    entry.app = options.entryPath; // Start with js/app.js
  }

  console.log(entry);

  return options.baseConfigFactory({
    corePath: options.corePath,
    mode: 'development',
    entry,

    // Don't use hashes in dev mode for better performance
    output: {
      filename: '[name].js',
      chunkFilename: '[name].chunk.js',
    },

    optimization: {
      minimize: false,
    },

    // Add development plugins
    plugins: dependencyHandlers().concat(plugins), // eslint-disable-line no-use-before-define

    // Emit a source map for easier debugging
    // See https://webpack.js.org/configuration/devtool/#devtool
    devtool: 'eval-source-map',

    transpileOnly: argv['show-errors'] ? false : true,

    transformers: [createStyledComponentsTransformer()],

    performance: {
      hints: false,
    },
    rules: options.rules ? options.rules : [],
  });
};
